plugins {
    id "com.github.johnrengelman.shadow"
    id "io.micronaut.application"
    id 'jacoco'
}

applicationName = 'kafkactl'
mainClassName = "com.michelin.ns4kafka.cli.KafkactlCommand"

repositories {
    mavenCentral()
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.michelin.ns4kafka.cli.*")
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.16'
    compileOnly "org.graalvm.nativeimage:svm"

    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    annotationProcessor("info.picocli:picocli-codegen:4.6.1")
    annotationProcessor "io.micronaut:micronaut-graal"

    implementation("info.picocli:picocli:4.6.1")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")

    //External libs
    implementation("org.ocpsoft.prettytime:prettytime:5.0.1.Final")
    implementation("io.github.java-diff-utils:java-diff-utils:4.9")

    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

shadowJar {
    archiveFileName = "kafkactl-${version}.jar"
}

nativeImage {
    imageName('kafkactl-'+rootProject.version)
    args = ['-H:Class=com.michelin.ns4kafka.cli.KafkactlCommand',
            '-H:IncludeResourceBundles=org.ocpsoft.prettytime.i18n.Resources',
            '-H:+ReportExceptionStackTraces']
}
dockerBuild {
    images = ["twobeeb/kafkactl:"+version]
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        html.enabled true
        xml.enabled true
    }
}
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filesMatching("application.yml"){
        filter(ReplaceTokens, tokens: [version: project.version])
    }
}