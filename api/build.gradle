plugins {
    id "com.github.johnrengelman.shadow"
    id "io.micronaut.application"
    id 'jacoco'
}

mainClassName = "com.michelin.ns4kafka.Application"

repositories {
    mavenCentral()
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "com.michelin.ns4kafka.*"
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.16'

    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut:micronaut-management")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.swagger.core.v3:swagger-annotations")

    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-ldap")
    implementation("io.micronaut.kafka:micronaut-kafka")


    runtimeOnly("ch.qos.logback:logback-classic")

    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
    testImplementation 'org.testcontainers:kafka:1.15.3'
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation 'org.apache.kafka:kafka-clients:2.6.0:test'
    testImplementation 'org.apache.kafka:kafka_2.12:2.6.0'
    testImplementation 'org.apache.kafka:kafka_2.12:2.6.0:test'
    testImplementation 'org.mockito:mockito-inline:3.7.7'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}
tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true'

}

run {
//    environment( "MICRONAUT_ENVIRONMENTS","dev")
}

test {
    reports {
        html.enabled false
    }
}

dockerBuild {
    images = ["twobeeb/ns4kafka:"+version]
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        html.enabled true
        xml.enabled true
    }
}
